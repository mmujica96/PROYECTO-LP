Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    ASYN
    AWAY
    BOOL
    BREAK
    COMA
    CONTINUE
    DIVIDE
    ELSE
    FLOTANTE
    FN
    FOR
    FROM
    GREAT
    IF
    LANGLE
    LCORCH
    LESS
    LLLAV
    MAIN
    MINUS
    NEW
    PLUS
    PUNTO
    PUNTO_COMA
    RANGLE
    RCOM
    RCORCH
    RETURN
    RLLAV
    STATIC
    TIMES
    TIPO_BOOL
    USE
    VEC
    VEC_OBJ
    WHILE

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> print
Rule 2     cuerpo -> asignacion
Rule 3     print -> PRINTLN MACRO LPAREN valor RPAREN
Rule 4     print -> PRINTLN LPAREN NUMBER RPAREN
Rule 5     asignacion -> LET ID EQUAL valor
Rule 6     asignacion -> LET MUT ID EQUAL valor
Rule 7     asignacion -> CONST ID EQUAL valor
Rule 8     asignacion -> LET ID TURBO_FISH TIPO_INT EQUAL NUMBER
Rule 9     asignacion -> LET ID TURBO_FISH TIPO_CHAR EQUAL CHAR
Rule 10    asignacion -> LET ID TURBO_FISH TIPO_STRING EQUAL STRING
Rule 11    valor -> NUMBER

Terminals, with rules where they appear

AS                   : 
ASYN                 : 
AWAY                 : 
BOOL                 : 
BREAK                : 
CHAR                 : 9
COMA                 : 
CONST                : 7
CONTINUE             : 
DIVIDE               : 
ELSE                 : 
EQUAL                : 5 6 7 8 9 10
FLOTANTE             : 
FN                   : 
FOR                  : 
FROM                 : 
GREAT                : 
ID                   : 5 6 7 8 9 10
IF                   : 
LANGLE               : 
LCORCH               : 
LESS                 : 
LET                  : 5 6 8 9 10
LLLAV                : 
LPAREN               : 3 4
MACRO                : 3
MAIN                 : 
MINUS                : 
MUT                  : 6
NEW                  : 
NUMBER               : 4 8 11
PLUS                 : 
PRINTLN              : 3 4
PUNTO                : 
PUNTO_COMA           : 
RANGLE               : 
RCOM                 : 
RCORCH               : 
RETURN               : 
RLLAV                : 
RPAREN               : 3 4
STATIC               : 
STRING               : 10
TIMES                : 
TIPO_BOOL            : 
TIPO_CHAR            : 9
TIPO_INT             : 8
TIPO_STRING          : 10
TURBO_FISH           : 8 9 10
USE                  : 
VEC                  : 
VEC_OBJ              : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 2
cuerpo               : 0
print                : 1
valor                : 3 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . print
    (2) cuerpo -> . asignacion
    (3) print -> . PRINTLN MACRO LPAREN valor RPAREN
    (4) print -> . PRINTLN LPAREN NUMBER RPAREN
    (5) asignacion -> . LET ID EQUAL valor
    (6) asignacion -> . LET MUT ID EQUAL valor
    (7) asignacion -> . CONST ID EQUAL valor
    (8) asignacion -> . LET ID TURBO_FISH TIPO_INT EQUAL NUMBER
    (9) asignacion -> . LET ID TURBO_FISH TIPO_CHAR EQUAL CHAR
    (10) asignacion -> . LET ID TURBO_FISH TIPO_STRING EQUAL STRING

    PRINTLN         shift and go to state 4
    LET             shift and go to state 5
    CONST           shift and go to state 6

    cuerpo                         shift and go to state 1
    print                          shift and go to state 2
    asignacion                     shift and go to state 3

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> print .

    $end            reduce using rule 1 (cuerpo -> print .)


state 3

    (2) cuerpo -> asignacion .

    $end            reduce using rule 2 (cuerpo -> asignacion .)


state 4

    (3) print -> PRINTLN . MACRO LPAREN valor RPAREN
    (4) print -> PRINTLN . LPAREN NUMBER RPAREN

    MACRO           shift and go to state 7
    LPAREN          shift and go to state 8


state 5

    (5) asignacion -> LET . ID EQUAL valor
    (6) asignacion -> LET . MUT ID EQUAL valor
    (8) asignacion -> LET . ID TURBO_FISH TIPO_INT EQUAL NUMBER
    (9) asignacion -> LET . ID TURBO_FISH TIPO_CHAR EQUAL CHAR
    (10) asignacion -> LET . ID TURBO_FISH TIPO_STRING EQUAL STRING

    ID              shift and go to state 9
    MUT             shift and go to state 10


state 6

    (7) asignacion -> CONST . ID EQUAL valor

    ID              shift and go to state 11


state 7

    (3) print -> PRINTLN MACRO . LPAREN valor RPAREN

    LPAREN          shift and go to state 12


state 8

    (4) print -> PRINTLN LPAREN . NUMBER RPAREN

    NUMBER          shift and go to state 13


state 9

    (5) asignacion -> LET ID . EQUAL valor
    (8) asignacion -> LET ID . TURBO_FISH TIPO_INT EQUAL NUMBER
    (9) asignacion -> LET ID . TURBO_FISH TIPO_CHAR EQUAL CHAR
    (10) asignacion -> LET ID . TURBO_FISH TIPO_STRING EQUAL STRING

    EQUAL           shift and go to state 14
    TURBO_FISH      shift and go to state 15


state 10

    (6) asignacion -> LET MUT . ID EQUAL valor

    ID              shift and go to state 16


state 11

    (7) asignacion -> CONST ID . EQUAL valor

    EQUAL           shift and go to state 17


state 12

    (3) print -> PRINTLN MACRO LPAREN . valor RPAREN
    (11) valor -> . NUMBER

    NUMBER          shift and go to state 19

    valor                          shift and go to state 18

state 13

    (4) print -> PRINTLN LPAREN NUMBER . RPAREN

    RPAREN          shift and go to state 20


state 14

    (5) asignacion -> LET ID EQUAL . valor
    (11) valor -> . NUMBER

    NUMBER          shift and go to state 19

    valor                          shift and go to state 21

state 15

    (8) asignacion -> LET ID TURBO_FISH . TIPO_INT EQUAL NUMBER
    (9) asignacion -> LET ID TURBO_FISH . TIPO_CHAR EQUAL CHAR
    (10) asignacion -> LET ID TURBO_FISH . TIPO_STRING EQUAL STRING

    TIPO_INT        shift and go to state 22
    TIPO_CHAR       shift and go to state 23
    TIPO_STRING     shift and go to state 24


state 16

    (6) asignacion -> LET MUT ID . EQUAL valor

    EQUAL           shift and go to state 25


state 17

    (7) asignacion -> CONST ID EQUAL . valor
    (11) valor -> . NUMBER

    NUMBER          shift and go to state 19

    valor                          shift and go to state 26

state 18

    (3) print -> PRINTLN MACRO LPAREN valor . RPAREN

    RPAREN          shift and go to state 27


state 19

    (11) valor -> NUMBER .

    RPAREN          reduce using rule 11 (valor -> NUMBER .)
    $end            reduce using rule 11 (valor -> NUMBER .)


state 20

    (4) print -> PRINTLN LPAREN NUMBER RPAREN .

    $end            reduce using rule 4 (print -> PRINTLN LPAREN NUMBER RPAREN .)


state 21

    (5) asignacion -> LET ID EQUAL valor .

    $end            reduce using rule 5 (asignacion -> LET ID EQUAL valor .)


state 22

    (8) asignacion -> LET ID TURBO_FISH TIPO_INT . EQUAL NUMBER

    EQUAL           shift and go to state 28


state 23

    (9) asignacion -> LET ID TURBO_FISH TIPO_CHAR . EQUAL CHAR

    EQUAL           shift and go to state 29


state 24

    (10) asignacion -> LET ID TURBO_FISH TIPO_STRING . EQUAL STRING

    EQUAL           shift and go to state 30


state 25

    (6) asignacion -> LET MUT ID EQUAL . valor
    (11) valor -> . NUMBER

    NUMBER          shift and go to state 19

    valor                          shift and go to state 31

state 26

    (7) asignacion -> CONST ID EQUAL valor .

    $end            reduce using rule 7 (asignacion -> CONST ID EQUAL valor .)


state 27

    (3) print -> PRINTLN MACRO LPAREN valor RPAREN .

    $end            reduce using rule 3 (print -> PRINTLN MACRO LPAREN valor RPAREN .)


state 28

    (8) asignacion -> LET ID TURBO_FISH TIPO_INT EQUAL . NUMBER

    NUMBER          shift and go to state 32


state 29

    (9) asignacion -> LET ID TURBO_FISH TIPO_CHAR EQUAL . CHAR

    CHAR            shift and go to state 33


state 30

    (10) asignacion -> LET ID TURBO_FISH TIPO_STRING EQUAL . STRING

    STRING          shift and go to state 34


state 31

    (6) asignacion -> LET MUT ID EQUAL valor .

    $end            reduce using rule 6 (asignacion -> LET MUT ID EQUAL valor .)


state 32

    (8) asignacion -> LET ID TURBO_FISH TIPO_INT EQUAL NUMBER .

    $end            reduce using rule 8 (asignacion -> LET ID TURBO_FISH TIPO_INT EQUAL NUMBER .)


state 33

    (9) asignacion -> LET ID TURBO_FISH TIPO_CHAR EQUAL CHAR .

    $end            reduce using rule 9 (asignacion -> LET ID TURBO_FISH TIPO_CHAR EQUAL CHAR .)


state 34

    (10) asignacion -> LET ID TURBO_FISH TIPO_STRING EQUAL STRING .

    $end            reduce using rule 10 (asignacion -> LET ID TURBO_FISH TIPO_STRING EQUAL STRING .)

