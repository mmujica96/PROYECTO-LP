    lex.py: 924:lex: tokens   = ['NUMBER', 'PLUS', 'MINUS', 'TIMES', 'DIVIDE', 'LPAREN', 'RPAREN', 'RCOM', 'TIPO_INT', 'LLLAV', 'RLLAV', 'ID', 'MACRONOT', 'LESS', 'GREAT', 'STRING', 'EQUAL', 'PUNTO_COMA', 'FLOAT', 'COMA', 'PUNTO', 'CHAR', 'TURBO_FISH', 'RCORCH', 'LCORCH', 'BOOL', 'DOUBLE_POINT', 'AND', 'OR', 'LET', 'MUT', 'CONST', 'FOR', 'IF', 'ELSE', 'WHILE', 'STATIC', 'AS', 'BREAK', 'FN', 'PRINTLN', 'MAIN', 'RETURN', 'ASYN', 'AWAY', 'CONTINUE', 'TIPO_BOOL', 'TIPO_STRING', 'FROM', 'NEW', 'VEC_OBJ', 'VEC', 'USE', 'TIPO_CHAR', 'TRUE', 'FALSE', 'PUSH', 'POP', 'ENUM', 'IN', 'ITER']
    lex.py: 925:lex: literals = ''
    lex.py: 926:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 953:lex: Adding rule t_TIPO_INT -> '(iu|i)(8|16|32|64|128|size)' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_BOOL -> '(true|false)' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_FLOAT -> '\d+\.\d+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z_0-9]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_NUMBER -> '\d+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_newline -> ';+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_STRING -> '"[a-zA-Z]*"' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ignore_RCOM -> '//[\S ]*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CHAR -> '\'\S\'' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_TURBO_FISH -> '\:\:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PLUS -> '\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MINUS -> '\-' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_TIMES -> '\*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIVIDE -> '\/' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LPAREN -> '\(' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RPAREN -> '\)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LLLAV -> '\{' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RLLAV -> '\}' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LESS -> '\<' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GREAT -> '\>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PUNTO -> '\.' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LCORCH -> '\[' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RCORCH -> '\]' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DOUBLE_POINT -> '\:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_AND -> '\&' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_OR -> '\|' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MACRONOT -> '!' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EQUAL -> '=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PUNTO_COMA -> ';' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_COMA -> ',' (state 'INITIAL')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_TIPO_INT>(iu|i)(8|16|32|64|128|size))|(?P<t_BOOL>(true|false))|(?P<t_FLOAT>\d+\.\d+)|(?P<t_ID>[a-zA-Z_][a-zA-Z_0-9]*)|(?P<t_NUMBER>\d+)|(?P<t_newline>;+)|(?P<t_STRING>"[a-zA-Z]*")|(?P<t_ignore_RCOM>//[\S ]*)|(?P<t_CHAR>\'\S\')|(?P<t_TURBO_FISH>\:\:)|(?P<t_PLUS>\+)|(?P<t_MINUS>\-)|(?P<t_TIMES>\*)|(?P<t_DIVIDE>\/)|(?P<t_LPAREN>\()|(?P<t_RPAREN>\))|(?P<t_LLLAV>\{)|(?P<t_RLLAV>\})|(?P<t_LESS>\<)|(?P<t_GREAT>\>)|(?P<t_PUNTO>\.)|(?P<t_LCORCH>\[)|(?P<t_RCORCH>\])|(?P<t_DOUBLE_POINT>\:)|(?P<t_AND>\&)|(?P<t_OR>\|)|(?P<t_MACRONOT>!)|(?P<t_EQUAL>=)|(?P<t_PUNTO_COMA>;)|(?P<t_COMA>,)'
